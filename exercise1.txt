Ans 1.1:10                                  10(+ 5 3 4)			    12(- 9 1)				    8(/ 6 2)				    3(+ (* 2 4) (- 4 6))		    6(define a 3)			    a = 3(define b (+ a 1))		    b = 4(+ a b (* a b))			    19(= a b)				    a = 4(if (and (> b a) (< b (* a b)))     b				    a = 4a)(cond ((= a 4) 6)		    6((= b 4) (+ 6 7 a))(else 25))(+ 2 (if (> b a) b a))		    6(* (cond ((> a b) a)		    	 ((< a b) b)	 (else -1))		    -5(+ a 1))Ans 1.2:(/ (+ 5 4 (- 2(-3(+6 (/ 4 3)))))  (*3 (-6 2) (- 2 7)) )Ans 1.3:(define (square x)    (* x x) )(define (square-of-greater-two x y z )    (cond ((and (< x y) (< x z)) (+ square(y) square(z)))          ((and (< y x) (< y z)) (+ square(x) square(z)))          ((and (< z y) (< z)x) (+ square(y) square(x)))    ))Ans 1.4:(define (a-plus-abs-b a b)((if (> b 0) + -) a b))This procedure will do both + and - based on the value of b. If b>0 then a+besle        a-bAns 1.5:(define (p) (p))(define (test x y)(if (= x 0)0y))Then he evaluates the expression(test 0 (p))If the interpreter is applicative-order then the test  function will return 0 by just checking value of x that is 0 and return 0.If the interpreter is normal-order then the function test will stuck in a infinite loop because interpreter first evaluate both the arrgument and when it try to evaluate (p), it get stuck in infinite loop. 